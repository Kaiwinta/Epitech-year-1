#!/usr/bin/env python3
##
## EPITECH PROJECT, 2023
## bs_neutri
## File description:
## bs.py
##

import math, sys

def update_harmo(harmo_mean, nb_value, new_value):
    old_denominator = nb_value / harmo_mean + 1 / new_value
    if old_denominator == 0:
        sys.exit(84)
    return (nb_value + 1) / old_denominator

def compute_rms(ari_mean, standard):
    nb = math.sqrt(math.fabs(pow(ari_mean, 2) + pow(standard, 2)))
    return nb

def compute_variance(nb_values, ari_mean, harmo_mean):
    variance = (nb_values * (harmo_mean - ari_mean) ** 2) / ((ari_mean) ** 2 * (nb_values - 1))
    return variance

def update_standard_deviation(standard_dev, n, new_value, ari_mean):
    squared_difference = (new_value - ari_mean) ** 2
    updated_std_dev = math.sqrt(math.fabs(((n - 1) * standard_dev ** 2 + squared_difference)) / n)
    return updated_std_dev

def loop_neutri(argv):
    nb_values = int(argv[1])
    ari_mean = float(argv[2])
    harmo_mean = float(argv[3])
    standard_dev = float(argv[4])
    root_mean = 0
    while True:
        new_value = input("Enter next value: ")
        if new_value == 'END':
            sys.exit(0)
        try:
            new_value = float(new_value)
            nb_values += 1
            ari_mean = (ari_mean * (nb_values - 1) + new_value) / nb_values
            harmo_mean = update_harmo(harmo_mean, nb_values - 1, new_value)
            standard_dev = update_standard_deviation(standard_dev, nb_values - 1, new_value, ari_mean)
            root_mean = compute_rms(ari_mean, standard_dev)
            print(f"    Number of values:\t{nb_values}")
            print(f"    Standard deviation:\t{standard_dev:.2f}")
            print(f"    Arithmetic mean:\t{ari_mean:.2f}")
            print(f"    Root mean square:\t{root_mean:.2f}")
            print(f"    Harmonic mean:\t{harmo_mean:.2f}")
            print('')
        except:
            print("Your have to enter an int or float")
            

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h":
            print("USAGE\n    ./104neutrinos n a h sd\n\nDESCRIPTION\n    n\t    number of values\n    a\t    arithmetic mean\n    h\t    harmonic mean\n    sd\t    standard deviation")
            sys.exit(0)
    if len(sys.argv) != 5:
        sys.exit(84)
    try:
        int(sys.argv[1])
    except:
        sys.exit(84)
    for i in range(2, len(sys.argv)):
        try:
            float(sys.argv[i])
        except:
            sys.exit(84)
    if int(sys.argv[1]) <= 0:
        sys.exit(84)
    loop_neutri(sys.argv)
    sys.exit(0)

if __name__ == "__main__":
    main()
